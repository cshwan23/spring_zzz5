


mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
<문1> [웹서버] 와 [웹브라우저]는 서로 무엇을 주고 받나요?
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	
	++++++++++++++++++++++++++++++++++++++++++++++++++++++
	[웹브라우저]  ->요청메시지->     <-응답메시지<- [웹서버]
	++++++++++++++++++++++++++++++++++++++++++++++++++++++

	-------------------------
	요청메시지 안에 구성요소
	-------------------------
		[파라미터명-파라미터값]    ->파라미터값은 클라이언트가 생성한 데이터로 주로 웹서버에서 DB 연동할 때 사용된다.
		[쿠키명-쿠키값]            ->쿠키값은 예전에 웹서버가 나에게 보내준 아주 작은 데이터
		[헤더명-헤더값]            ->헤더값은 웹브라우저의 정보를 의미한다.

	-------------------------
	응답메시지 안에 구성요소
	-------------------------
		[html 소스]                ->[DB 연동 결과물]이 포함된 HTML 소스
		[쿠키명-쿠키값]            ->웹서버가 만들어서 클라이언트가 잠시 기지고있으라고 전달해 주는 값
		[헤더명-헤더값]            ->웹서버가 만든  HTML 소스의 주변 정보


mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
<문2> [웹브라우저]가 URL 주소로 [웹서버]에 접근할 때  [웹서버] 내부에서는 무슨 일이 벌어짐니까? 
      스프링 프레임 워크를 사용한다는 조건입니다.
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	------------------------------------------------------------------
	<1>[웹브라우저]가 /xxx.do  형태의 URL 주소로 [웹서버]에 접근한다.
	------------------------------------------------------------------
	<2>컨트롤러 클래스 내부의 @RequestMapping(value="/xxx.do") 가 붙어있는 메소드를 호출한다.
	------------------------------------------------------------------
		=>컨트롤러 클래스 마빡에 @Controller 라는 어노테이션이 붙어있다.
		----------------------------------------------------------
		=>@RequestMapping(value="/xxx.do") 가 붙어있는 메소드에 매개변수로는 아래와 같은 데이터가 들어온다.
			--------------------------------------------------
			DTO클래스명 매개변수명  
			-------------------------------------------------- 
				=> DTO 객체의 메위주가 매개변수로 들어온다.
				=> DTO 객체 속성변수 안에 [파라미터값]이 들어온다. 파라미터명이 속성변수명과 일치해야한다.
			--------------------------------------------------
			@RequestParam(value="파라미터명") 자료형 매개변수명
			--------------------------------------------------
				=>파라미터명 에 해당하는 파라미터값을 매개변수에 저장되어 들어옴
				=>파라미터값이 많지 않을 경우 사용함
			--------------------------------------------------
			HttpServletRequest request
			--------------------------------------------------
				=>HttpServletRequest 객체의 메위주가 매개변수 request 에 저장되어 들어온다.
				  즉 HttpServletRequest 객체의 메소드를 호출하고 싶으면 이렇게 매개변수 선언한다.
			--------------------------------------------------
			HttpServletResponse response
			--------------------------------------------------
				=>HttpServletResponse 객체의 메위주가 매개변수 response 에 저장되어 들어온다.
				  즉 HttpServletResponse 객체의 메소드를 호출하고 싶으면 이렇게 매개변수 선언한다.
			--------------------------------------------------
			HttpSession session
			--------------------------------------------------
				=>HttpSession 객체의 메위주가 매개변수 session 에 저장되어 들어온다.
				  즉 HttpSession 객체의 메소드를 호출하고 싶으면 이렇게 매개변수 선언한다.
	------------------------------------------------------------------
	<3>메소드 내부에서 [DB 연동한 결과물]과 [호출할 JSP 페이지명]을 ModelAndView 객체에 저장하고 ModelAndView 객체를 리턴한다.
	------------------------------------------------------------------
		=>ModelAndView 객체에 저장된 [DB 연동한 결과물]은 HttpServletRequest 객체에도 저장된다.
		=>ModelAndView 객체에 [DB 연동한 결과물] 저장 방법
			addObject( "키값",  DB연동한결과물 ) 메소드 호출로 저장한다.
		=>ModelAndView 객체에 [호출할 JSP 페이지명] 저장 방법
			setViewName( 호출할 JSP 페이지명 ) 메소드 호출로 저장한다.
	------------------------------------------------------------------
	<4>ModelAndView 객체에 저장된 JSP 페이지를 호출하면서 DB 연동한 결과물을 반영하여 HTML 소스를 생성한다.
	------------------------------------------------------------------
		JSP 페이지에서  [DB 연동한 결과물]을 EL 로 꺼내는 방법.(현재는 많이 사용하는 방법)
			${requestScope.키값}
		----------------------------------------------------------
		JSP 페이지에서  [DB 연동한 결과물]을 자바 로 꺼내는 방법.(현재는 잘 사용하지 않는 방법)
			<% (자료형)request.getAttribute("키값") %>

	------------------------------------------------------------------
	<5>[응답 메시지]를 만들어 HTML 소스, 쿠키-쿠키값, 헤더명-헤더값 들을 저장한다.
	------------------------------------------------------------------
	<6>[응답 메시지]를 클라이언트에게 전송한다.
	------------------------------------------------------------------
	<7>클라이언트는 응답메시지에 저장된 HTML 소스를 실행하여 웹브라우저에 출력한다.
	------------------------------------------------------------------



mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
<문3> HttpServletRequest 객체는 도대체 뭐하는 놈입니까?  ****
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	[웹브라우저]가 /xxx.do  형태의 URL 주소로 [웹서버]에 접근하면 웹서버 쪽에 자동 생성하는 객체이다.
	--------------------------------------------------------------
	[웹서버]가 [응답메시지]를 전송하고 난후 제거된다.
	--------------------------------------------------------------
	HttpServletRequest 객체의 주 기능
	--------------------------------------------------------------
		------------------------------------------
		=> [요청메시지] 안의 파라미터값 리턴한다.
		------------------------------------------
			-------------------------------------
			자바 코드로 파라미터값 꺼내는 방법 
			-------------------------------------
				request.getParameter("파라미터명")        => 체크박스가 아닌 입력 양식의 문자열 파라미터값 꺼낼때
				request.getParameterValues("파라미터명")  => 체크박스 입력 양식의 파라미터값 들이 저장된 배열 꺼낼때
			-------------------------------------
			JSP 페이지에서 EL 코드로 파라미터값 꺼내는 방법 
			-------------------------------------
				${param.파라미터명}                => 체크박스가 아닌 입력 양식의 문자열 파라미터값 꺼낼때
				${paramValues.파라미터명}          => 체크박스 입력 양식의 파라미터값 들이 저장된 배열 꺼낼때
		------------------------------------------
		=> DB 연동 결과물을 저장한다. 마치 HashMap 객체의 기능과 비슷하다.
		------------------------------------------
			HttpServletRequest의 setAttribute("키값", DB연동데이터) 메소드 호출로 DB연동 결과물을 저장한다.
			---------------------------------------------
			HttpServletRequest의 setAttribute("키값", DB연동데이터) 메소드로 저장된 DB연동 결과물 꺼내는 방법은 아래와 같다.
				---------------------------------------------
				request.getAttribute("키값")  =>자바 방법
				${requestScope.키값}          =>EL 방법	
				---------------------------------------------
		------------------------------------------
		=> 웹서버의 주요 정보를 리턴한다.
		------------------------------------------
			웹서버의 포트번호
			접속 URL 주소
			접속 URI 주소
			컨텍스트루트명(=> /프로젝트명)
			등등
		------------------------------------------
		=> HttpSession 객체의 메위주를 리턴한다.
		------------------------------------------
		------------------------------------------
		=> 기타 등등
		------------------------------------------
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
<문4> HttpServletResponse 객체는 도대체 뭐하는 놈입니까?
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	--------------------------------------------------------------
	[웹브라우저]가 /xxx.do  형태의 URL 주소로 [웹서버]에 접근하면 웹서버 쪽에 자동 생성하는 객체이다.
	--------------------------------------------------------------
	[웹서버]가 [응답메시지]를 전송하고 난후 제거된다.
	--------------------------------------------------------------
	클라이어트에게 전송할 응답메시지를 관리한다.
	--------------------------------------------------------------
	HttpServletResponse 객체의 주 기능
	--------------------------------------------------------------
		응답메시지에 쿠키를 저장한다. 응답메시지는 클라이언트의 웹브라우저로 전송된다.
		----------------------------------
		클라이언트에게 임의의 URL 주소로 재 접속하게 한다.
			<예> response.sendRedirect( URL주소 );
		----------------------------------
		기타 등등
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
<문5> HttpSession 객체는 도대체 뭐하는 놈입니까? *****
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	--------------------------------------------------------------
	HttpSession 객체의 생명 주기
	--------------------------------------------------------------
		<1>[웹브라우저]가 URL 주소로 [웹서버]에 접근하면 웹서버 쪽에 HttpSession 객체가 생성된다.
		   이때 HttpSession 객체는 고유 아이디를 소유한다.
		---------------------------------------------
		<2>웹서버 쪽에서 필요에 의해 HttpSession 객체에 데이터를 저장한다. 이 데이터는 주로 DB 연동 데이터이다.
		---------------------------------------------
		<3>[응답메시지]에 쿠키값으로  고유 아이디를 저장해서 [응답메시지]를 클라이언트에게 전송한다
		   결국 클라이언트의 웹브라우저는 [고유 아이디]를 쿠키값으로 소유하게 된 셈이다.
		   [응답메시지]를 클라이언트에게 전송한 후에도 HttpSession 객체는 제거되지 않고 살아 있다.
		---------------------------------------------
		<4>[웹브라우저]가 동일한 URL 주소로 [웹서버]에 재 접근한다.
		   이때 요청메시지 안에는 [고유 아이디]를 가진 쿠키값이 존재한다.
		---------------------------------------------
		<5>처음 접속 시 HttpSession 객체에 저장한 데이터를 꺼낸다.
		   이때 아까 생성된 HttpSession 객체는 클리이언트가 가져온 고유아이디와 동일한 고유아이디를 가진
		   놈이다.
		---------------------------------------------
			만약 클라이언트가 고유 아이디를 못가지고 접속하거나 서버쪽에서 고유 아이디를 가진 
			HttpSession 객체가 제거된다면 새롭게 HttpSession 객체가 생성된다.
		---------------------------------------------
		결국 HttpSession 객체는 재 접속해서 꺼내보고 싶은 데이터가 있을 경우 사용한다.
		---------------------------------------------
			예>로그인 성공 후 아이디를 맡겨 놓고 재 접속할 때 마다 꺼내서 이전에 로그인한 놈인지 확인한다.
			예>쇼핑몰에서 페이지 이동하면 고른 상품이 결제 화면에서 다 볼수 있는 경우
	--------------------------------------------------------------
	HttpSession 객체에 데이터를 저장하는 방법
	--------------------------------------------------------------
		---------------------------------------------
		session.setAttribute("키값", 저장데이터);
		---------------------------------------------
	--------------------------------------------------------------
	HttpSession 객체에 저장된 데이터를 JSP 페이지에서 EL 로 꺼내는 방법
	--------------------------------------------------------------
		---------------------------------------------
		${sessionScope.키값}
		---------------------------------------------
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
<문6> EL 이 뭠까?
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	--------------------------------------------------------------
	JSP 6대 기술 중의 하나이다.
		<참고> <% 자바문법 %> 는 JSP 6대 기술 중의 하나로서 JSP Scriptlet 이라고 부른다.
	--------------------------------------------------------------
	ModelAndView 객체 또는 HttpServletRequest 객체 또는 HttpSession 객체에 키값으로 저장된 데이터를 
	JSP 페이지에 표현하는 데 사용된다.
	--------------------------------------------------------------
	ModelAndView 객체 또는 HttpServletRequest 객체에   키값으로 저장된 놈 꺼낼때 형식
	--------------------------------------------------------------
		${requestScope.키값}
		${키값}                 --> requestScope. 생략 가능
	--------------------------------------------------------------
	HttpSession 객체에   키값으로 저장된 놈 꺼낼때 형식
	--------------------------------------------------------------
		${sessionScope.키값}
		${키값}                 --> HttpSession. 생략 가능.
		--------------------------------------------------------------
		만약 ${키값} 가 있다면 HttpSession 객체를 먼저 뒤지고 없으면 HttpServletRequest 객체를 뒤진다.
	--------------------------------------------------------------
	EL 의 연산자
	--------------------------------------------------------------
		${empty 키값}     -->empty는 키값에 해당하는 데이터가 null 이거나 길이가 없거나 할 경우 true 리턴하는 연산자
				  -->true 리턴하는 경우
					null 또는  ""(문자열 길이가 0) 인 경우, 비어있는 배열/HashMap/ArrayList 객체일 경우
					<주의>숫자 0  은 false 리턴
		--------------------------------
		${!empty 키값}    -->empty 의 결과값을 반대로 바꾼다.
		--------------------------------
		and 또는 &&       --> 자바의 && 과 동일하다.
		--------------------------------
		or 또는  ||        --> 자바의 || 과 동일하다.
		--------------------------------
		비교연산식?데이터1:데이터2   --> 자바 동일한 삼항 연산자.
		--------------------------------
		<     또는  lt      -->오른쪽이 크면 true 리턴
		--------------------------------
		>     또는  gt      -->왼쪽이 크면 true 리턴
		--------------------------------
		/     또는  div     -->나눈 후에 몫을 리턴
		--------------------------------
		%     또는  mod     -->나눈 후에 나머지 리턴
		--------------------------------
		<=    또는 le       -->오른쪽이 같거나 크면 true 리턴
		--------------------------------
		>=    또는 ge       -->왼쪽이 같거나 크면 true 리턴
		--------------------------------
		!     또는 not      -->오른쪽이 true 면 false 로, false 면 true 바꿈
		--------------------------------
		==   !=   +  -  *  등은 자바와 동일하다.
	--------------------------------------------------------------
	만약 EL 로 꺼낸 놈이 문자나 숫자가 아닌 ArrayList 또는 배열 이라면 
	커스텀태그(=JSTL) 와 어울려 데이터를 표현해야한다.
	--------------------------------------------------------------
	
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
<문7> JSTL 이 뭠까?
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm	
	--------------------------------------------------------------
	사용자 정의 태그(=custom tag) 중의 하나이다.
	자카르타라는 단체에서 만든 사용자 정의 태그이다.
	사용자 정의 태그란 표현은 HTML 태그 형태로 표현하되 실행될  때는 자바 코드로 바뀌어 실행된다.
	--------------------------------------------------------------
	--------------------------------------------------------------
	JSTL 의 조건문 형태
	--------------------------------------------------------------
		<c:if test="${true또는false를 리턴하는 EL의 비교/논리연산식}">
			실행 코드
		</c:if>
		------------------------------------------------------
			▶EL 연산식이 true 실행 코드를 실행한다.
			▶<주의> test=" ${~} " EL 앞 또는 뒤에 공백 있으면 무조건 false 리턴.
		------------------------------------------------------
		<c:choose>
			<c:when  test="${true또는false를 리턴하는 EL의 비교/논리연산식}"> 
				실행구문1
			</c:when>
			~
			<c:otherwise>
				실행구문2 
			</c:otherwise>
		</c:choose>
		------------------------------------------------------
			▶EL의 비교/논리연산식이 true 면 [실행구문1] 실행, 아니면 [실행구문2]를 실행한다.
			▶<c:when  test="${EL의 비교연산식 또는 논리연산식}"> ~ </c:when>은 1개 이상이 올 수 있다.
	--------------------------------------------------------------
	JSTL 의 반복문 형태
	--------------------------------------------------------------
		------------------------------------------------------
		<c:forEach  var="변수명"  begin="시작번호"  end="끝번호" step="증감숫자">
			실행구문
		</c:forEach>
		------------------------------------------------------
			 ▶[변수]에 [시작번호]부터 저장해서 [증감숫자] 대로 증가하면서   변수<=끝번호   조건까지  실행 구문을 반복한다.

		------------------------------------------------------
		<c:forEach  var="xxx"  items="${requestScope.List객체또는배열이저장된키값}"  varStatus="LoopTagStatus객체참조변수명">
			실행구문
		</c:forEach>
		------------------------------------------------------
			▶${requestScope.List객체또는배열이저장된키값} 로 리턴되는 [배열]이나 [List] 객체에 저장된 데이터를 
			  차례대로 하나씩 변수 xxx 에 저장해 실행구문을 반복해 실행한다.
			▶${requestScope.List객체또는배열이저장된키값} 대신 ${sessionScope.List객체또는배열이저장된키값}  가 삽입될 수도 있다.
			▶LoopTagStatus 객체의 속성변수 호출방법
				${LoopTagStatus객체참조변수명.index}  => [반복문] 실행 횟수의 [인덱스 번호] 리턴. 처음 반복 시 0 리턴.
				${LoopTagStatus객체참조변수명.count}  => [반복문] 실행 횟수의 [순서 번호] 리턴. 처음 반복 시 1 리턴.
				${LoopTagStatus객체참조변수명.begin}  => begin 속성값 리턴
				${LoopTagStatus객체참조변수명.end}    => end 속성값 리턴
				${LoopTagStatus객체참조변수명.step}   => step 속성값 리턴
				${LoopTagStatus객체참조변수명.first}  => [반복문] 실행이 첫 번째 실행인 경우 true 리턴
				${LoopTagStatus객체참조변수명.last}   => [반복문] 실행이 마지막 실행인 경우 true 리턴
				${LoopTagStatus객체참조변수명.current} => 현재 실행 [반복문]에서 사용하는 변수명에 저장된 객체 리턴

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
<문8> 자바스크립트에서    $(document).ready(function(){ 실행구문 })    코드 무얼 의미 하나요?
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm	
	---------------------------------------------
	실행구문은 body 태그를 다 읽어 들여 실행 후 실행되는 자스 코딩이다.
	---------------------------------------------
	실행구문은 주로 아래와 같다.
	---------------------------------------------
		태그에 걸린 이벤트 설정 코딩. 즉 태그에 이벤트가 발생하면 실행될 구문.
		DB 연동 결과물을 입력 양식 관련 태그의 value값으로 삽입할 때.
		DB 연동 결과물을 div 태그 또는 span 태그 또는 td/td 등의 태그 내부에 삽입할 때.
		body 태그를 다 읽어 들여 실행 후 실행해야하는 함수 호출할 때.
		기타 등등
	---------------------------------------------
	$(document).ready(function(){ 실행구문 }) 의 대체 코드
	---------------------------------------------
		<script>
			function xxx(){
				실행구문
			}
		</script>
		<body onLoad="xxx()">    
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
<문9> 자바스크립트에서 아래 코드는 무얼 의미 하나요?
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm	
	--------------------------------------------
	var xxx = $(".xxx").val();
	--------------------------------------------
		class=xxx 를 가진 입력 양식 태그의 value 값을 가져다 자스 변수 xxx 에 저장하라.
		이 value 값은 웹브라우저에 클라이언트가 입력 또는 선택한 값이다.
		클라이언트가 입력 또는 선택한 값의 유효성 체크가 주 목적이다.
	--------------------------------------------
	var aaa = $(".xxx .yyy").val();
	--------------------------------------------
		class=xxx 를 가진 태그의  후손 중  class=yyy 를 가진 태그의 value 값을 가져다 자스 변수 aaa 에 저장하라.
		var aaa = $(".xxx").find(".yyy").val(); 동일한 코드이다.

	--------------------------------------------
	var xxx = $(".xxx").html();
	--------------------------------------------
		class=xxx 를 가진 태그의  내부의 html 코딩을 그대로 문자로 리턴해서 변수 xxx 에 저장하라

	--------------------------------------------
	var xxx = $(".xxx").text();
	--------------------------------------------
		class=xxx 를 가진 태그의  내부의 html 코딩의 브라우저 출력값을 문자로 리턴해서 변수 xxx 에 저장하라.
		즉 내부의 html 코딩은 문자로 리턴되지 않는다.

	--------------------------------------------
	$(".xxx").html("<div>파마머리</div>");
	--------------------------------------------
		class=xxx 를 가진 태그의  내부에 <div>파마머리</div> 덮어씌우면서 삽입하라
		즉 괄호안의 html 태그까지 그대로 삽입한다.

	--------------------------------------------
	$(".xxx").text("파마머리");
	--------------------------------------------
		class=xxx 를 가진 태그의  내부에  문자   파마머리  를  덮어씌우면서 삽입하라
		즉 괄호안의 html 조차도 문자로 그대로 덮어씌우면서 삽입하라. 
			즉 태그의 역할을 못한다.
			즉 태그도 문자화된다.

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
<문10> html 아래 코드는 무얼 의미 하나요?
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm	
	--------------------------------------------
	<form name="xxx" method="post" action="/yyy.do">

		~

	</form>
	--------------------------------------------
		--------------------------------------------
		document.xxx.submit() 메소드 호출 시 일어나는 일
		--------------------------------------------
			=>웹서버에 "/yyy.do" 라는 URL 주소로 접속한다.
			=>form 태그 내부의 입력양식의 name 값을 파라미터명, value  값을 파라미터값으로 
			   파라미터명과 파라미터값이 서버로 전송된다.
			=>post 방식으로 웹서버에 접속하므로 파라미터명과 파라미터값은 URL 주소 뒤에 달려 가지 않고 전송된다.














