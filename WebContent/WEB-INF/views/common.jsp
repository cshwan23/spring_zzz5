<!-- ****************************************************** -->
<!-- JSP 기술의 한 종류인 [Page Directive]를 이용하여 현 JSP 페이지 처리 방식 선언하기 -->
<!-- ****************************************************** -->
	<!-- 현재 이 JSP 페이지 실행 후 생성되는 문서는 HTML 이고,이 문서 안의 데이터는 UTF-8 방식으로 인코딩한다 라고 설정함 -->
	<!-- 현재 이 JSP 페이지는 UTF-8 방식으로 인코딩 한다 -->
	<!-- UTF-8 인코딩 방식은 한글을 포함 전 세계 모든 문자열을 부호화할 수 있는 방법이다. -->
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>



<!--mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm-->
<!--JSP 페이지에서 사용할 [사용자 정의 태그]의 한 종류인 [JSTL의 C 코어 태그]를 사용하겠다고 선언-->
<!--아래 코딩이 들어가야 JSTL의 C 코어 태그를 사용할 수 있다.-->
<!--
	--------------------------------------
	JSTL 이란?
	--------------------------------------
		=>자카르타라는 단체에서 만든 [사용자 정의 태그]를 말한다.
		=>자바 문법을 HTML 과 같은 태그 형태로 표현한다.
		=>HTML 과 같은 태그 형태로 표현하면 뒤에서 자바 문법으로 바뀌어 실행된다.
		=>JSTL 사용 장점
			-태그 형태이므로 디자이너 퍼블리셔, 초급 개발자가 접근이 쉽다.
			-큰 에러가 아닌 이상 화면이 멈추지 않는다.
			-null 처리에 대해 관대하다. null에 대해 민감한 반응을 보이지않는다. 
		=>JSTL 은 EL 과 같이 쓰인다.
	--------------------------------------
	EL(=Expression Language=표현언어) 이란?
	--------------------------------------
		=>자바영역의 데이터를 JSP 페이지에 표현하는 언어이다.
		=>EL 문법 형식
			-------------
			달러{EL문법}
			-------------
		=>JSP 기술 중에 하나이다.
		=><예>HttpServletRequest 객체에 저장된 데이터를 아주 쉽게 표현해서 JSP 에 삽입한다.
				--------------------------------------------------
				자바로 JSP 페이지에서  HttpServletRequest 객체에 "keyword" 란 키값으로 
				저장된 놈을 꺼내서 div 태그안에 삽입하는 경우 아래처럼 하면된다
				--------------------------------------------------
				<%
				String keyword = (String)request.getAttribute("keyword");
				%>
				<div> <%=keyword%> </div>
				--------------------------------------------------
				EL 문법으로 JSP 페이지에서  HttpServletRequest 객체에 "keyword" 란 키값으로 
				저장된 놈을 꺼내서 div 태그안에 삽입하는 경우 아래처럼 하면된다.
				심지어 아래 코딩에서 requestScope. 을 생략해도 된다.
				--------------------------------------------------
				<div>${requestScope.keyword}</div>

-->
<!--mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm-->
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>


<%--
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[JSTL 커스텀 태그]를 사용하여 HttpServletRequest 객체에 키값으로 데이터를 저장하기
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	<c:set var="키값" value="데이터" scope="request"/>
	------------------------------------------------------
		위 [JSTL 커스텀 태그]를 JSP 페이지에서 자바 문법으로 표현하면 아래와 같다.
		request.setAttribute("키값", 데이터 );
	------------------------------------------------------

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[JSTL 커스텀 태그]를 사용하여 HttpServletRequest 객체에 키값으로 저장된 데이터를 꺼내기
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	${requestScope.키값}	


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[JSTL 커스텀 태그]를 사용하여 HttpSession 객체에 키값으로 데이터를 저장하기
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	<c:set var="키값" value="데이터" scope="session"/>
	------------------------------------------------------
		위 [JSTL 커스텀 태그]를 JSP 페이지에서 자바 문법으로 표현하면 아래와 같다.
		session.setAttribute("키값", 데이터 );
	------------------------------------------------------

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[JSTL 커스텀 태그]를 사용하여 HttpSession 객체에 키값으로 저장된 데이터를 꺼내기
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	${sessionScope.키값}	
--%>


<!----------------------------------------------------------------------------------
[JSTL 커스텀 태그]를 사용하여 HttpServletRequest 객체에 키값 "croot" 로 문자 "${requestScope.croot}" 를 저장하기
------------------------------------------------------------------------------------->
<c:set var="croot" value="/z_spring" scope="request"/>

<!----------------------------------------------------------------------------------
[JSTL 커스텀 태그]를 사용하여 HttpServletRequest 객체에 키값 "bodyBgcolor" 로 문자 "#f6f6f6" 를 저장하기
------------------------------------------------------------------------------------->
<c:set var="bodyBgcolor" value="#f6f6f6" scope="request"/>

<!----------------------------------------------------------------------------------
[JSTL 커스텀 태그]를 사용하여 HttpServletRequest 객체에 키값 "thBgcolor" 로 문자 "lightgray" 를 저장하기
------------------------------------------------------------------------------------->
<c:set var="thBgcolor" value="lightgray" scope="request"/>


<!--mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm-->
<!-- JSP 페이지에서 사용할 [자바스크립트 파일], [CSS 파일] 수입하기-->
<!--mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm-->
<!------------------------------------------------->
<!--JSP 페이지에서 사용할 [JQuery API] 수입-->
<!--JSP 페이지에서 사용할 [공용 함수 내장된 common.js 파일]  수입-->
<!------------------------------------------------->
<script src="${requestScope.croot}/resources/jquery-1.11.0.min.js" type="text/javascript"></script>
<link href="${requestScope.croot}/resources/common.css?ver=<%=Math.random()%>" rel="stylesheet" type="text/css">
<script src="${requestScope.croot}/resources/common.js?ver=<%=Math.random()%>" type="text/javascript"></script>


<!-- 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
URL 주소 => 호출하는 자원의 위치
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    포트번호        서버내부의 주소
                     ----          ------------
http://www.naver.com:8088${requestScope.croot}/loginForm.do
--------------------     -------- 
유일한대외적인 주소       프로젝트명  
                         ---------------------
						  URI 주소
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	http://www.naver.com   => 도메인. 전 세계의 유일한 서버 주소
	:8088                  => 서버가 설치된 운영체제로 부터 부여 받은 포트번호
	${requestScope.croot}/loginForm.do => 서버내부의 자원 주소



 -->


